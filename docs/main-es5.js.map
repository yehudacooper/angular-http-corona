{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/comps/corona/corona.component.ts","webpack:///src/app/comps/corona/corona.component.html","webpack:///src/app/comps/countries/countries.component.ts","webpack:///src/app/comps/countries/countries.component.html","webpack:///src/app/services/corona.service.ts","webpack:///src/app/services/countries.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","CoronaComponent","myCoronaService","getCorona","subscribe","data","coronaData","console","log","Countries","forEach","country","Country","choosenCountry","showCorona","CountryCode","Slug","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","Date","CountriesComponent","myCountryService","allCountries","getCountries","country1","countryName","showCountries","CoronaService","myhttp","get","providedIn","CountriesService","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'http-countries';\n}\n","<app-countries></app-countries>\n<!-- <app-corona></app-corona> -->","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule} from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CountriesComponent } from './comps/countries/countries.component';\nimport { CoronaComponent } from './comps/corona/corona.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CountriesComponent,\n    CoronaComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule, HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { CoronaObj } from '../../../models.ts/corona';\nimport { CoronaService } from '../../services/corona.service';\n\n@Component({\n  selector: 'app-corona',\n  templateUrl: './corona.component.html',\n  styleUrls: ['./corona.component.css']\n})\nexport class CoronaComponent implements OnInit {\n\n  public coronaData: CoronaObj;\n  public country: any;\n  constructor(public myCoronaService: CoronaService) { }\n\n  ngOnInit(): void {\n    this.myCoronaService.getCorona().subscribe(data => {this.coronaData = data; });\n  }\n  showCorona(){\n    console.log(this.coronaData);\n   }\n   chosenCountry(){\n     this.coronaData.Countries.forEach(country => {\n       if (country.Country === this.myCoronaService.choosenCountry){\n         // tslint:disable-next-line:no-unused-expression\n         this.country === country;\n       }\n     });\n   }\n\n}\n","<p>corona works!</p>\n<button (click)=\"showCorona()\">click</button>\n<ul>\n    <li>Country : {{country.Country}}</li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    \n</ul>\n<!-- Country: string,\nCountryCode: string,\nSlug: string,\nNewConfirmed: number,\nTotalConfirmed: number,\nNewDeaths: number,\nTotalDeaths: number,\nNewRecovered: number,\nTotalRecovered: number,\nDate: string -->","import { Component, OnInit } from '@angular/core';\nimport { CountriesService } from '../../services/countries.service';\nimport { Country } from '../../../models.ts/country';\nimport { CoronaService } from '../../services/corona.service';\nimport { CoronaObj } from '../../../models.ts/corona';\n\n@Component({\n  selector: 'app-countries',\n  templateUrl: './countries.component.html',\n  styleUrls: ['./countries.component.css']\n})\nexport class CountriesComponent implements OnInit {\n  public coronaData: CoronaObj;\n  public country1: any;\n\n  public allCountries: Country[] = [];\n  constructor(private myCountryService: CountriesService, private myCoronaService: CoronaService) { }\n\n  ngOnInit(): void {\n    this.myCountryService.getCountries().subscribe( data => {this.allCountries = data; });\n    this.myCoronaService.getCorona().subscribe(data => {this.coronaData = data; });\n  }\n   showCountries(){\n     this.country1 = false;\n   }\n   choosenCountry(countryName: string){\n     this.myCoronaService.choosenCountry = countryName;\n     console.log(this.myCoronaService.choosenCountry);\n     console.log(this.coronaData.Countries);\n     this.coronaData.Countries.forEach(country => {\n      if (country.Country === countryName){\n        this.country1 = country;\n        console.log(this.country1);\n\n      }\n      console.log(country.Country);\n    });\n     console.log(this.country1);\n   }\n  //  chosenCountry(){\n  //   this.coronaData.Countries.forEach(country => {\n  //     if (country.Country === this.myCoronaService.choosenCountry){\n  //       // tslint:disable-next-line:no-unused-expression\n  //       this.country === country;\n  //     }\n  //   });\n  // }\n\n}\n"," \n <!-- <ul *ngFor=\"let country of allCountries\" >\n    <li>name : {{country.name}}</li>\n    <li>capital : {{country.capital}}</li>\n    <li>region : {{country.region}}</li>\n    <li>population : {{country.population}}</li>\n    <li>flag : {{country.flag}}</li>\n    \n</ul>  -->\n<h1>\" מוקדש לתמר קופר הלחוצה</h1>\n<button (click)=\"showCountries()\">click to show countries</button>\n <table style=\"width:100%\" *ngIf=\"!country1\">\n  <tr>\n    <th>Name</th>\n    <th>Capital</th>\n    <th>Region</th>\n    <th>Population</th>\n    <th>Flag</th>\n  </tr>\n  <tr *ngFor=\"let country of allCountries\" (click)=\"choosenCountry(country.name)\">\n    <td>{{country.name}}</td>\n    <td>{{country.capital}}</td>\n    <td>{{country.region}}</td>\n    <td>{{country.population}}</td>\n    <td><img src={{country.flag}} ></td> \n  </tr>\n</table>\n\n<ul *ngIf=\"country1\">\n    <li>Country : {{country1.Country}}</li>\n    <li>CountryCode : {{country1.CountryCode}}</li>\n    <li>Slug : {{country1.Slug}}</li>\n    <li>NewConfirmed : {{country1.NewConfirmed}}</li>\n    <li>TotalConfirmed : {{country1.TotalConfirmed}}</li>\n    <li>NewDeaths : {{country1.NewDeaths}}</li>\n    <li>TotalDeaths : {{country1.TotalDeaths}}</li>\n    <li>NewRecovered : {{country1.NewRecovered}}</li>\n    <li>TotalRecovered : {{country1.TotalRecovered}}</li>\n    <li>Date : {{country1.Date}}</li>\n   \n    \n</ul>\n\n\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CoronaObj } from '../../models.ts/corona';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoronaService {\n\n  public choosenCountry: string;\n  constructor(private myhttp: HttpClient ) {\n   }\n\n   getCorona(): Observable<CoronaObj>{\n     return this.myhttp.get<CoronaObj>('https://api.covid19api.com/summary');\n   }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Country } from '../../models.ts/country';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountriesService {\n\n  constructor(private myhttp: HttpClient ) {\n   }\n\n   getCountries(): Observable<Country[]>{\n     return this.myhttp.get<Country[]>('https://restcountries.eu/rest/v2/all');\n   }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}