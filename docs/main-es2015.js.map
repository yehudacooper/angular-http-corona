{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/comps/corona/corona.component.ts","./src/app/comps/corona/corona.component.html","./src/app/comps/countries/countries.component.ts","./src/app/comps/countries/countries.component.html","./src/app/services/corona.service.ts","./src/app/services/countries.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'http-countries';\n}\n","<app-countries></app-countries>\n<!-- <app-corona></app-corona> -->","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule} from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CountriesComponent } from './comps/countries/countries.component';\nimport { CoronaComponent } from './comps/corona/corona.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CountriesComponent,\n    CoronaComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule, HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { CoronaObj } from '../../../models.ts/corona';\nimport { CoronaService } from '../../services/corona.service';\n\n@Component({\n  selector: 'app-corona',\n  templateUrl: './corona.component.html',\n  styleUrls: ['./corona.component.css']\n})\nexport class CoronaComponent implements OnInit {\n\n  public coronaData: CoronaObj;\n  public country: any;\n  constructor(public myCoronaService: CoronaService) { }\n\n  ngOnInit(): void {\n    this.myCoronaService.getCorona().subscribe(data => {this.coronaData = data; });\n  }\n  showCorona(){\n    console.log(this.coronaData);\n   }\n   chosenCountry(){\n     this.coronaData.Countries.forEach(country => {\n       if (country.Country === this.myCoronaService.choosenCountry){\n         // tslint:disable-next-line:no-unused-expression\n         this.country === country;\n       }\n     });\n   }\n\n}\n","<p>corona works!</p>\n<button (click)=\"showCorona()\">click</button>\n<ul>\n    <li>Country : {{country.Country}}</li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    \n</ul>\n<!-- Country: string,\nCountryCode: string,\nSlug: string,\nNewConfirmed: number,\nTotalConfirmed: number,\nNewDeaths: number,\nTotalDeaths: number,\nNewRecovered: number,\nTotalRecovered: number,\nDate: string -->","import { Component, OnInit } from '@angular/core';\nimport { CountriesService } from '../../services/countries.service';\nimport { Country } from '../../../models.ts/country';\nimport { CoronaService } from '../../services/corona.service';\nimport { CoronaObj } from '../../../models.ts/corona';\n\n@Component({\n  selector: 'app-countries',\n  templateUrl: './countries.component.html',\n  styleUrls: ['./countries.component.css']\n})\nexport class CountriesComponent implements OnInit {\n  public coronaData: CoronaObj;\n  public country1: any;\n\n  public allCountries: Country[] = [];\n  constructor(private myCountryService: CountriesService, private myCoronaService: CoronaService) { }\n\n  ngOnInit(): void {\n    this.myCountryService.getCountries().subscribe( data => {this.allCountries = data; });\n    this.myCoronaService.getCorona().subscribe(data => {this.coronaData = data; });\n  }\n   showCountries(){\n     this.country1 = false;\n   }\n   choosenCountry(countryName: string){\n     this.myCoronaService.choosenCountry = countryName;\n     console.log(this.myCoronaService.choosenCountry);\n     console.log(this.coronaData.Countries);\n     this.coronaData.Countries.forEach(country => {\n      if (country.Country === countryName){\n        this.country1 = country;\n        console.log(this.country1);\n\n      }\n      console.log(country.Country);\n    });\n     console.log(this.country1);\n   }\n  //  chosenCountry(){\n  //   this.coronaData.Countries.forEach(country => {\n  //     if (country.Country === this.myCoronaService.choosenCountry){\n  //       // tslint:disable-next-line:no-unused-expression\n  //       this.country === country;\n  //     }\n  //   });\n  // }\n\n}\n"," \n <!-- <ul *ngFor=\"let country of allCountries\" >\n    <li>name : {{country.name}}</li>\n    <li>capital : {{country.capital}}</li>\n    <li>region : {{country.region}}</li>\n    <li>population : {{country.population}}</li>\n    <li>flag : {{country.flag}}</li>\n    \n</ul>  -->\n<h1>\" מוקדש לתמר קופר הלחוצה</h1>\n<button (click)=\"showCountries()\">click to show countries</button>\n <table style=\"width:100%\" *ngIf=\"!country1\">\n  <tr>\n    <th>Name</th>\n    <th>Capital</th>\n    <th>Region</th>\n    <th>Population</th>\n    <th>Flag</th>\n  </tr>\n  <tr *ngFor=\"let country of allCountries\" (click)=\"choosenCountry(country.name)\">\n    <td>{{country.name}}</td>\n    <td>{{country.capital}}</td>\n    <td>{{country.region}}</td>\n    <td>{{country.population}}</td>\n    <td><img src={{country.flag}} ></td> \n  </tr>\n</table>\n\n<ul *ngIf=\"country1\">\n    <li>Country : {{country1.Country}}</li>\n    <li>CountryCode : {{country1.CountryCode}}</li>\n    <li>Slug : {{country1.Slug}}</li>\n    <li>NewConfirmed : {{country1.NewConfirmed}}</li>\n    <li>TotalConfirmed : {{country1.TotalConfirmed}}</li>\n    <li>NewDeaths : {{country1.NewDeaths}}</li>\n    <li>TotalDeaths : {{country1.TotalDeaths}}</li>\n    <li>NewRecovered : {{country1.NewRecovered}}</li>\n    <li>TotalRecovered : {{country1.TotalRecovered}}</li>\n    <li>Date : {{country1.Date}}</li>\n   \n    \n</ul>\n\n\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CoronaObj } from '../../models.ts/corona';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoronaService {\n\n  public choosenCountry: string;\n  constructor(private myhttp: HttpClient ) {\n   }\n\n   getCorona(): Observable<CoronaObj>{\n     return this.myhttp.get<CoronaObj>('https://api.covid19api.com/summary');\n   }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Country } from '../../models.ts/country';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountriesService {\n\n  constructor(private myhttp: HttpClient ) {\n   }\n\n   getCountries(): Observable<Country[]>{\n     return this.myhttp.get<Country[]>('https://restcountries.eu/rest/v2/all');\n   }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}